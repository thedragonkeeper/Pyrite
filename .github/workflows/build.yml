name: Build Pyrite
on:
  schedule:
    - cron: '00 17 * * 2,4,6'
  workflow_dispatch:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
jobs:
  push-ghcr:
    name: Make
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        base_image_name: [pyrite]
        major_version: [40]
        include:
          - major_version: 40
            is_latest_version: true
            is_stable_version: true
    steps:
      # Checkout push-to-registry action GitHub repository
      - name: Checkout Push to Registry action
        uses: actions/checkout@v4

      - name: Check just syntax
        uses: ublue-os/just-action@v1

      - name: Maximize build space
        uses: ublue-os/remove-unwanted-software@v6

      - name: Matrix Variables
        run: |
          echo "AKMODS_FLAVOR=fsync" >> $GITHUB_ENV
          echo "BASE_IMAGE_NAME=${{ matrix.base_image_name }}" >> $GITHUB_ENV
          echo "BASE_IMAGE_FLAVOR=main" >> $GITHUB_ENV
          echo "IMAGE_FLAVOR=main" >> $GITHUB_ENV          

      - name: Generate tags
        id: generate-tags
        shell: bash
        run: |
          # Generate a timestamp for creating an image version history
          TIMESTAMP="$(date +%Y%m%d)"
          MAJOR_VERSION="${{ matrix.major_version }}"
          COMMIT_TAGS=()
          BUILD_TAGS=()
          # Have tags for tracking builds during pull request
          SHA_SHORT="${GITHUB_SHA::7}"
          COMMIT_TAGS+=("pr-${{ github.event.pull_request.number }}-${MAJOR_VERSION}")
          COMMIT_TAGS+=("${SHA_SHORT}-${MAJOR_VERSION}")

          BUILD_TAGS=("${MAJOR_VERSION}" "${MAJOR_VERSION}-${TIMESTAMP}")
          BUILD_TAGS+=("${MAJOR_VERSION}-stable" "${MAJOR_VERSION}-stable-${TIMESTAMP}")
          BUILD_TAGS+=("latest" "stable")

          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              echo "Generated the following commit tags: "
              for TAG in "${COMMIT_TAGS[@]}"; do
                  echo "${TAG}"
              done
              alias_tags=("${COMMIT_TAGS[@]}")
          else
              alias_tags=("${BUILD_TAGS[@]}")
          fi
          echo "Generated the following build tags: "
          for TAG in "${BUILD_TAGS[@]}"; do
              echo "${TAG}"
          done
          echo "alias_tags=${alias_tags[*]}" >> $GITHUB_OUTPUT          

      - name: Get Current Fedora Version
        id: labels
        shell: bash
        run: |
          set -eo pipefail
          ver=$(skopeo inspect docker://ghcr.io/ublue-os/bazzite-deck-gnome:latest | jq -r '.Labels["org.opencontainers.image.version"]')
          if [ -z "$ver" ] || [ "null" = "$ver" ]; then
            echo "inspected image version must not be empty or null"
            exit 1
          fi
          echo "VERSION=$ver" >> $GITHUB_OUTPUT          

      # Build metadata
      - name: Image Metadata
        uses: docker/metadata-action@v5
        id: meta
        with:
          images: |
            pyrite            
          labels: |
            org.opencontainers.image.title=pyrite
            org.opencontainers.image.version=${{ steps.labels.outputs.VERSION }}
            org.opencontainers.image.description=Pyrite is an OCI image that serves as an alternative operating system for the Steam Deck, and is heavily based on ublue-os/Bazzite
            io.artifacthub.package.readme-url=https://bazzite.gg/
            io.artifacthub.package.logo-url=https://raw.githubusercontent.com/ublue-os/bazzite/main/repo_content/logo.png            

      # Build image using Buildah action
      - name: Build Image
        id: build_image
        uses: redhat-actions/buildah-build@v2
        with:
          containerfiles: |
            ./ContainerFile            
          image: pyrite
          tags: |
            ${{ steps.generate-tags.outputs.alias_tags }}            
          build-args: |
            IMAGE_NAME=pyrite
            IMAGE_VENDOR=${{ github.repository_owner }}
            BASE_IMAGE_NAME=pyrite     
          labels: ${{ steps.meta.outputs.labels }}
          oci: false

      - name: Lowercase Registry
        id: registry_case
        uses: ASzc/change-string-case-action@v6
        with:
          string: ${{ env.IMAGE_REGISTRY }}

      - name: Push To GHCR
        uses: redhat-actions/push-to-registry@v2
        id: push
        if: github.event_name != 'pull_request'
        env:
          REGISTRY_USER: ${{ github.actor }}
          REGISTRY_PASSWORD: ${{ github.token }}
        with:
          image: ${{ steps.build_image.outputs.image }}
          tags: ${{ steps.build_image.outputs.tags }}
          registry: ${{ steps.registry_case.outputs.lowercase }}
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASSWORD }}
          extra-args: |
            --disable-content-trust            

      - name: Echo outputs
        if: github.event_name != 'pull_request'
        run: |
          echo "${{ toJSON(steps.push.outputs) }}"   
